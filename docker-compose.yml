version: "3.9"
services: 

  web:
    image: nginx:latest
    container_name: nginx
    ports: 
      - ${WEB_PORT}:80  #for local #서버일 환경변수 80으로 변경
      - 443:443
    restart: always
    volumes: 
        - ./nginx_conf/default_${CONF_STATUS}.conf:/etc/nginx/conf.d/default.conf  ## 서버배포시에는 prod ##로컬 개발시는 dev (env)
        - ./src:/var/www/html  # src 디렉토리도 생성한다해서 도커 nginx 서버와 매칭
        - ./certbot/www:/var/www/certbot/:ro  #:ro는 read only #certbot ssl인증을 위해서 인증이 필요없을 시 주석
        - ./certbot/conf/:/etc/letsencrypt/:ro #certbot 컨테이너에서 최초 만들어준 파일들 사용
    depends_on:
      - php
      - mysql
    networks:
      - laravel
  
  ## https 인증을 위해서 추가됨 Jun 2022,
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - laravel

  php:
    container_name: php
    volumes:
      - ./src:/var/www/html  #이제 php를 src 디렉토리로 연결
    build:  
      context: .
      dockerfile: Dockerfile 
    #ports: 
      # - "9000:9000"   ## 9000 오픈 안하기 (취약성이 있을 수 있음)
    networks:
      - laravel

  composer:
    image: composer:latest
    container_name: composer
    volumes:
      - ./src:/var/www/html  
    working_dir: /var/www/html # 컨테이너 어디에 파일들이 있을 지를 결정
    networks:
      - laravel
    #$ docker-compose run --rm composer require tailwindcss(필요한라이브러리)

  npm:
    image: node:16.13 #stable  
    container_name: npm
    volumes: 
      - ./src:/var/www/html
    working_dir: /var/www/html
    entrypoint: ['npm']
    #command: ['run', 'watch']  ## development 할 때에는 실행을 해서 tailwindcss의 css를 계속 만들 수 있게 함
    ### delopyment 시에 command는 주석처리하기 // development 때에는 주석해제
    networks: 
      - laravel
    #entrypoint: ['npm', '--no-build-links']  # docker-composer run 이 실행될 때 실행된다고 함
    # $ docker-compose run -rm npm install
    # npm으로 로컬에서 하듯이 json파일을 이용 패키지들을 다운 되어 진다
    # 이후 
    # $ docker-compose run --rm npm run dev 
    # 으로 실행을 하면 mix를 진행하게 됨 

  artisan:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: artisan
    volumes:
      - ./src:/var/www/html
    depends_on: # dependency 필요 
      - mysql
    working_dir: /var/www/html
    entrypoint: ['php', '/var/www/html/artisan'] # Added 'php' before '/var/www/html/artisan'
    networks: 
      - laravel
    # docker-compose run --rm artisan migrate 로 하면 된다!

  mysql:
    image: mariadb:latest
    container_name: mysql
    restart: unless-stopped
    ports:
      - 127.0.0.1:3306:3306  ## 외부로 expose 안 되게 설정
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PWD}  # .env
      MYSQL_DATABASE: ${MYSQL_DB_NAME}
      MYSQL_USER: ${MYSQL_USER_ID}
      MYSQL_PASSWORD: ${MYSQL_PWD}
      SERVICE_TAGS: dev 
    volumes:
      - ./mysqldata:/var/lib/mysql
    networks:
      - laravel
  
  phpmyadmin:
    image: phpmyadmin
    container_name: phpmyadmin
    networks: 
      - laravel
    restart: always
    ports:
      - 127.0.0.1:9889:80   ## 외부로 노출 안되게 변경 
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST= mysql
      - PMA_PORT= 3306

networks:
  laravel:

volumes:
  mysqldata: {}
